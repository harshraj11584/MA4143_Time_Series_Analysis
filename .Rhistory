"For Baseline Model, MSE = "
baseline_error
"Model 1 MSE "
mse(stocks,m1$fitted)
"Model 2 MSE"
mse(stocks,m2$fitted)
"Model 3 MSE "
mse(stocks,m3$fitted)
"Model 4 MSE "
mse(stocks,m4$fitted)
"Model 1 AIC "
m1$aic
"Model 2 AIC"
m2$aic
"Model 3 AIC"
m3$aic
"Model 4 AIC"
m4$aic
m1$bic
plot(forecast(m1,level=c(75,95),h=10))
plot(forecast(m2,level=c(75,95),h=10))
plot(forecast(m3,level=c(75,95),h=10))
plot(forecast(m4,level=c(75,95),h=10))
"For Baseline Model, MSE = "
baseline_error
"Model 1 MSE "
mse(stocks,m1$fitted)
"Model 2 MSE"
mse(stocks,m2$fitted)
"Model 3 MSE "
mse(stocks,m3$fitted)
"Model 4 MSE "
mse(stocks,m4$fitted)
"Model 1 AIC "
m1$aic
"Model 2 AIC"
m2$aic
"Model 3 AIC"
m3$aic
"Model 4 AIC"
m4$aic
m1$bic
Res <- data.table(Models = c ("A","B","C"), AIC=c(1,2,3) )
plot(forecast(m1,level=c(75,95),h=10))
plot(forecast(m2,level=c(75,95),h=10))
plot(forecast(m3,level=c(75,95),h=10))
plot(forecast(m4,level=c(75,95),h=10))
"For Baseline Model, MSE = "
baseline_error
"Model 1 MSE "
mse(stocks,m1$fitted)
"Model 2 MSE"
mse(stocks,m2$fitted)
"Model 3 MSE "
mse(stocks,m3$fitted)
"Model 4 MSE "
mse(stocks,m4$fitted)
"Model 1 AIC "
m1$aic
"Model 2 AIC"
m2$aic
"Model 3 AIC"
m3$aic
"Model 4 AIC"
m4$aic
m1$bic
Res <- data.frame(Models = c ("A","B","C"), AIC=c(1,2,3) )
plot(forecast(m1,level=c(75,95),h=10))
plot(forecast(m2,level=c(75,95),h=10))
plot(forecast(m3,level=c(75,95),h=10))
plot(forecast(m4,level=c(75,95),h=10))
"For Baseline Model, MSE = "
baseline_error
"Model 1 MSE "
mse(stocks,m1$fitted)
"Model 2 MSE"
mse(stocks,m2$fitted)
"Model 3 MSE "
mse(stocks,m3$fitted)
"Model 4 MSE "
mse(stocks,m4$fitted)
"Model 1 AIC "
m1$aic
"Model 2 AIC"
m2$aic
"Model 3 AIC"
m3$aic
"Model 4 AIC"
m4$aic
m1$bic
Res <- data.frame(Models = c ("A","B","C"), AIC=c(1,2,3) )
Res
plot(forecast(m1,level=c(75,95),h=10))
plot(forecast(m2,level=c(75,95),h=10))
plot(forecast(m3,level=c(75,95),h=10))
plot(forecast(m4,level=c(75,95),h=10))
"For Baseline Model, MSE = "
baseline_error
"Model 1 MSE "
mse(stocks,m1$fitted)
"Model 2 MSE"
mse(stocks,m2$fitted)
"Model 3 MSE "
mse(stocks,m3$fitted)
"Model 4 MSE "
mse(stocks,m4$fitted)
"Model 1 AIC "
m1$aic
"Model 2 AIC"
m2$aic
"Model 3 AIC"
m3$aic
"Model 4 AIC"
m4$aic
m1$bic
"model1 - ARIMA(1,1,2)")
plot(forecast(m1,level=c(75,95),h=10))
plot(forecast(m2,level=c(75,95),h=10))
plot(forecast(m3,level=c(75,95),h=10))
plot(forecast(m4,level=c(75,95),h=10))
"For Baseline Model, MSE = "
baseline_error
"Model 1 MSE "
mse(stocks,m1$fitted)
"Model 2 MSE"
mse(stocks,m2$fitted)
"Model 3 MSE "
mse(stocks,m3$fitted)
"Model 4 MSE "
mse(stocks,m4$fitted)
"Model 1 AIC "
m1$aic
"Model 2 AIC"
m2$aic
"Model 3 AIC"
m3$aic
"Model 4 AIC"
m4$aic
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
SSRES = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(75,95),h=20))
plot(forecast(m2,level=c(75,95),h=20))
plot(forecast(m3,level=c(75,95),h=20))
plot(forecast(m4,level=c(75,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
SSRES = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(75,95),h=20))
plot(forecast(m2,level=c(75,95),h=20))
plot(forecast(m3,level=c(75,95),h=20))
plot(forecast(m4,level=c(75,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(50,95),h=20))
plot(forecast(m2,level=c(50,95),h=20))
plot(forecast(m3,level=c(50,95),h=20))
plot(forecast(m4,level=c(50,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(55,95),h=20))
plot(forecast(m2,level=c(50,95),h=20))
plot(forecast(m3,level=c(50,95),h=20))
plot(forecast(m4,level=c(50,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(51,95),h=20))
plot(forecast(m2,level=c(50,95),h=20))
plot(forecast(m3,level=c(50,95),h=20))
plot(forecast(m4,level=c(50,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(51,95),h=20))
line(forecast(m1,level=c(51,95),h=20)$mean)
plot(forecast(m2,level=c(50,95),h=20))
plot(forecast(m3,level=c(50,95),h=20))
plot(forecast(m4,level=c(50,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(60,95),h=20))
plot(forecast(m2,level=c(60,95),h=20))
plot(forecast(m3,level=c(60,95),h=20))
plot(forecast(m4,level=c(60,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(70,95),h=20))
plot(forecast(m2,level=c(70,95),h=20))
plot(forecast(m3,level=c(70,95),h=20))
plot(forecast(m4,level=c(70,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(66,95),h=20))
plot(forecast(m2,level=c(66,95),h=20))
plot(forecast(m3,level=c(66,95),h=20))
plot(forecast(m4,level=c(66,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
plot(forecast(m1,level=c(70,95),h=20))
plot(forecast(m2,level=c(70,95),h=20))
plot(forecast(m3,level=c(70,95),h=20))
plot(forecast(m4,level=c(70,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
#Checking Stationarity with lag 1
adf.test(x=ts , alternative="stationary") #non stationary
library(car)
library(caret)
library(TSA)
library(tseries)
library(ModelMetrics)
library(uroot)
library(fUnitRoots)
library(forecast)
nse_stocks <- read.csv(file = 'Dataset/nifty50.csv')
summary(nse_stocks)
# nse_stocks
#want to model the closing points for the data
dta <- nse_stocks[ c("Date","Close" ) ]
dta$Date <- as.Date(dta$Date,format="%d-%b-%Y")
summary(dta)
str(dta)
times <- dta$Date
stocks <- dta$Close
str(stocks)
str(times)
ts <- as.ts(stocks)
plot(dta,type='l')
#setting up a baseline model that predicts y(t+1) = y(t)
#any model that is good must have Mean Abs Error better than this model
n<-length(ts) #number of datapoints
y_baseline_actual <- stocks[2:n]
y_baseline_predicted <- stocks[1:n-1]
baseline_error <- mse(actual=y_baseline_actual,predicted=y_baseline_predicted)
baseline_error
#Checking Stationarity with lag 1
adf.test(x=ts , alternative="stationary") #non stationary
adfTest(ts,type="nc") #non stationary
#Checking Stationarity with lag autodetermined
adf.test(x=ts , alternative="stationary")
adfTest(ts,type="nc") #non - stationary
#Trying Box-Cox Transformation for Stationarity
ts_final.transform = BoxCox.ar(ts)
lambda = ts_final.transform$mle # estimated value of lambda based on MLE
transformed.ts_final<-bcPower(ts,lambda) # transformed TS
plot(transformed.ts_final, type = 'l',ylab="boxCox transformed") # NO Significant improvement
adf.test(transformed.ts_final) #Non Stationary
adfTest(transformed.ts_final,type="nc") #NOn Stationary
#Trying Log Transform
plot(log(ts), ylab = 'logarithmData' , type = 'l') # No change
#Trying Differencing
plot(diff(ts),ylab='First Difference',type='l')
adf.test(diff(ts)) #Stationary
adfTest(diff(ts),type='nc') #Stationary
tss <- diff(ts)
#Checking Stationarity with lag autodetermined
adf.test(x=ts , alternative="stationary")
adfTest(ts,type="nc") #non - stationary
#Trying Box-Cox Transformation for Stationarity
ts_final.transform = BoxCox.ar(ts)
lambda = ts_final.transform$mle # estimated value of lambda based on MLE
transformed.ts_final<-bcPower(ts,lambda) # transformed TS
plot(transformed.ts_final, type = 'l',ylab="boxCox transformed") # NO Significant improvement
adf.test(transformed.ts_final) #Non Stationary
adfTest(transformed.ts_final,type="nc") #NOn Stationary
#Trying Log Transform
plot(log(ts), ylab = 'logarithmData' , type = 'l') # No change
#Trying Differencing
plot(diff(ts),ylab='First Difference',type='l')
adf.test(diff(ts)) #Stationary
adfTest(diff(ts),type='nc') #Stationary
tss <- diff(ts)
plot(times,stocks,type='l' , ylab = "model1 - ARIMA(1,1,2)")
lines(times,m1$fitted,pch= "*",col="dark red")
plot(times,stocks,type='l', ylab = "model2 - ARIMA(3,1,3)")
points(times,m2$fitted,pch='*',col="dark blue")
plot(times,stocks,type='l', ylab = "model3 - ARIMA(3,1,0)")
points(times,m3$fitted,pch='*',col="dark green")
plot(times,stocks,type='l', ylab = "model4 - ARIMA(8,1,3)")
points(times,m4$fitted,pch='*',col="orange")
plot(times,stocks,type='l' , ylab = "model1 - ARIMA(1,1,2)")
lines(times,m1$fitted,pch= "*",col="dark red")
plot(times,stocks,type='l', ylab = "model2 - ARIMA(3,1,3)")
lines(times,m2$fitted,pch='*',col="dark blue")
plot(times,stocks,type='l', ylab = "model3 - ARIMA(3,1,0)")
lines(times,m3$fitted,pch='*',col="dark green")
plot(times,stocks,type='l', ylab = "model4 - ARIMA(8,1,3)")
lines(times,m4$fitted,pch='*',col="orange")
library(car)
library(caret)
library(TSA)
library(tseries)
library(ModelMetrics)
library(uroot)
library(fUnitRoots)
library(forecast)
nse_stocks <- read.csv(file = 'Dataset/nifty50.csv')
summary(nse_stocks)
# nse_stocks
#want to model the closing points for the data
dta <- nse_stocks[ c("Date","Close" ) ]
dta$Date <- as.Date(dta$Date,format="%d-%b-%Y")
summary(dta)
str(dta)
times <- dta$Date
stocks <- dta$Close
str(stocks)
str(times)
ts <- as.ts(stocks)
plot(dta,type='l')
#setting up a baseline model that predicts y(t+1) = y(t)
#any model that is good must have Mean Abs Error better than this model
n<-length(ts) #number of datapoints
y_baseline_actual <- stocks[2:n]
y_baseline_predicted <- stocks[1:n-1]
baseline_error <- mse(actual=y_baseline_actual,predicted=y_baseline_predicted)
baseline_error
#Checking Stationarity with lag autodetermined
adf.test(x=ts , alternative="stationary")
adfTest(ts,type="nc") #non - stationary
#Trying Box-Cox Transformation for Stationarity
ts_final.transform = BoxCox.ar(ts)
lambda = ts_final.transform$mle # estimated value of lambda based on MLE
transformed.ts_final<-bcPower(ts,lambda) # transformed TS
plot(transformed.ts_final, type = 'l',ylab="boxCox transformed") # NO Significant improvement
adf.test(transformed.ts_final) #Non Stationary
adfTest(transformed.ts_final,type="nc") #NOn Stationary
#Trying Log Transform
plot(log(ts), ylab = 'logarithmData' , type = 'l') # No change
#Trying Differencing
plot(diff(ts),ylab='First Difference',type='l')
adf.test(diff(ts)) #Stationary
adfTest(diff(ts),type='nc') #Stationary
tss <- diff(ts)
# Detcting the order using ACF and PACF plots
# Should add EACF ?
acf(tss, lag.max=15, ylab =  "Auto Correlation Function",ci.type="ma") # suggests q=3
pacf(tss, lag.max=15, ylab = "Partial Auto Correlation Function") # suggests p=3
eacf(tss, ar.max=15, ma.max=15) #suggesting ARMA(1,2)
#applying armasubsets on differenced ts
result = armasubsets(y=tss,nar=10,nma=7,y.name='test',ar.method='ols')
plot(result)
#To minimize BIC, it suggests AR(3) and ARIMA(8,1,3)
# M1 : conditional least squares estimates :
m1 <- Arima(ts,order=c(1,1,2),include.mean=TRUE,method="CSS")
# M1 : maximum likelihood estimates :
m1 <- Arima(ts,order=c(1,1,2),include.mean=TRUE,method="ML")
# M1 : first CSS then ML on resulting estimates :
m1 <- Arima(ts,order=c(1,1,2),include.mean=TRUE,method="CSS-ML")
plot( y=(m1$residuals), x=times )
densityplot(as.numeric(m1$residuals))
acf(m1$residuals,lag.max=20,ci.type="ma") #Residuals are uncorrelated
pacf(m1$residuals, lag.max=20)
qqnorm(m1$residuals)
qqline(m1$residuals)
"Sum of Squares of Residuals for ARIMA(1,1,2) = "
sum((m1$residuals)^2)
tsdiag(m1,  gof = 15,omit.initial=F)
# For Ljung-Box Test, p-values > 0.05 => Residuals are Not Correlated
nse_stocks <- read.csv(file = 'Dataset/nifty50.csv')
summary(nse_stocks)
# nse_stocks
#want to model the closing points for the data
dta <- nse_stocks[ c("Date","Close" ) ]
dta$Date <- as.Date(dta$Date,format="%d-%b-%Y")
summary(dta)
str(dta)
times <- dta$Date
stocks <- dta$Close
str(stocks)
str(times)
ts <- as.ts(stocks)
plot(dta,type='l')
#Checking Stationarity with lag autodetermined
adf.test(x=ts , alternative="stationary")
adfTest(ts,type="nc") #non - stationary
#Trying Box-Cox Transformation for Stationarity
ts_final.transform = BoxCox.ar(ts)
lambda = ts_final.transform$mle # estimated value of lambda based on MLE
transformed.ts_final<-bcPower(ts,lambda) # transformed TS
plot(transformed.ts_final, type = 'l',ylab="boxCox transformed") # NO Significant improvement
adf.test(transformed.ts_final) #Non Stationary
adfTest(transformed.ts_final,type="nc") #NOn Stationary
#Trying Log Transform
plot(log(ts), ylab = 'logarithmData' , type = 'l') # No change
#Trying Differencing
plot(diff(ts),ylab='First Difference',type='l')
adf.test(diff(ts)) #Stationary
adfTest(diff(ts),type='nc') #Stationary
tss <- diff(ts)
# Detcting the order using ACF and PACF plots
# Should add EACF ?
acf(tss, lag.max=15, ylab =  "Auto Correlation Function",ci.type="ma") # suggests q=3
pacf(tss, lag.max=15, ylab = "Partial Auto Correlation Function") # suggests p=3
eacf(tss, ar.max=15, ma.max=15) #suggesting ARMA(1,2)
#applying armasubsets on differenced ts
result = armasubsets(y=tss,nar=10,nma=7,y.name='test',ar.method='ols')
plot(result)
#To minimize BIC, it suggests AR(3) and ARIMA(8,1,3)
# M1 : conditional least squares estimates :
m1 <- Arima(ts,order=c(1,1,2),include.mean=TRUE,method="CSS")
# M1 : maximum likelihood estimates :
m1 <- Arima(ts,order=c(1,1,2),include.mean=TRUE,method="ML")
# M1 : first CSS then ML on resulting estimates :
m1 <- Arima(ts,order=c(1,1,2),include.mean=TRUE,method="CSS-ML")
plot( y=(m1$residuals), x=times )
densityplot(as.numeric(m1$residuals))
acf(m1$residuals,lag.max=20,ci.type="ma") #Residuals are uncorrelated
pacf(m1$residuals, lag.max=20)
qqnorm(m1$residuals)
qqline(m1$residuals)
"Sum of Squares of Residuals for ARIMA(1,1,2) = "
sum((m1$residuals)^2)
tsdiag(m1,  gof = 15,omit.initial=F)
# For Ljung-Box Test, p-values > 0.05 => Residuals are Not Correlated
# M2 : conditional least squares estimates :
m2 <- Arima(ts,order=c(3,1,3),include.mean=TRUE,method="CSS")
# M2 : maximum likelihood estimates :
m2 <- Arima(ts,order=c(3,1,3),include.mean=TRUE,method="ML")
# M2 : first CSS then ML on resulting estimates :
m2 <- Arima(ts,order=c(3,1,3),include.mean=TRUE,method="CSS-ML")
plot( y=(m2$residuals), x=times )
densityplot(as.numeric(m2$residuals))
acf(m2$residuals,lag.max=20,ci.type="ma")
pacf(m2$residuals, lag.max=20)
qqnorm(m2$residuals)
qqline(m2$residuals)
"Sum of Squares of Residuals for ARIMA(3,1,3) = "
sum((m2$residuals)^2)
tsdiag(m2,  gof = 15,omit.initial=F)
# M3 : conditional least squares estimates :
m3 <- Arima(ts,order=c(3,1,0),include.mean=TRUE,method="CSS")
# M3 : maximum likelihood estimates :
m3 <- Arima(ts,order=c(3,1,0),include.mean=TRUE,method="ML")
# M3 : first CSS then ML on resulting estimates :
m3 <- Arima(ts,order=c(3,1,0),include.mean=TRUE,method="CSS-ML")
plot( y=(m3$residuals), x=times )
densityplot(as.numeric(m3$residuals))
acf(m3$residuals,lag.max=20,ci.type="ma")
pacf(m3$residuals, lag.max=20)
qqnorm(m3$residuals)
qqline(m3$residuals)
"Sum of Squares of Residuals for ARIMA(3,1,0) = "
sum((m3$residuals)^2)
tsdiag(m3,  gof = 15,omit.initial=F)
# M4 : conditional least squares estimates :
m4 <- Arima(ts,order=c(8,1,3),include.mean=TRUE,method="CSS")
# M4 : maximum likelihood estimates :
m4 <- Arima(ts,order=c(8,1,3),include.mean=TRUE,method="ML")
# M1 : first CSS then ML on resulting estimates :
m4 <- Arima(ts,order=c(8,1,3),include.mean=TRUE,method="CSS-ML")
plot( y=(m4$residuals), x=times )
densityplot(as.numeric(m4$residuals))
acf(m4$residuals,lag.max=20,ci.type="ma") #Residuals are uncorrelated
pacf(m4$residuals, lag.max=20)
qqnorm(m4$residuals)
qqline(m4$residuals)
"Sum of Squares of Residuals for ARIMA(8,1,3) = "
sum((m4$residuals)^2)
tsdiag(m4,  gof = 15,omit.initial=F)
# For Ljung-Box Test, p-values > 0.05 => Residuals are Not Correlated
plot(forecast(m1,level=c(70,95),h=20))
plot(forecast(m2,level=c(70,95),h=20))
plot(forecast(m3,level=c(70,95),h=20))
plot(forecast(m4,level=c(70,95),h=20))
Res <- data.frame(Models = c ("Baseline", "ARIMA(1,1,2)","ARIMA(3,1,3)","ARIMA(3,1,0)","ARIMA(8,1,3)"),
AIC = c("x",m1$aic,m2$aic,m3$aic,m4$aic),
BIC = c("x",m1$bic,m2$bic,m3$bic,m4$bic),
MSE = c(baseline_error,mse(stocks,m1$fitted),mse(stocks,m2$fitted),mse(stocks,m3$fitted),mse(stocks,m4$fitted))
)
Res
